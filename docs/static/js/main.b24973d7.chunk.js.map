{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAgB9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAgBfG,YAAY,uB,+BCzBbC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTC,EAFe,iDAEkCC,UAAWH,GAF7C,6BACN,oCADM,SAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVrB,kBAgBbM,GAhBa,4CAAH,sDCCTO,EAAc,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGtC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,SCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAc,IAAD,EACbf,mBAAS,CAC/BsB,KAAK,GACLa,SAAQ,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KA0BvC,OApBAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAC,GAICH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAO3B,CAACpB,IAIIqB,EDtByBK,CAAc1B,GAAjCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,yCAAd,SAAyDhB,IAEvDoB,GAAW,mBAAGJ,UAAU,oCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADEA,EAAIC,aEhB1BgB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,cAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAU9B,OACI,qCACI,iDACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAEQ4C,EAAWnB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEAA,SAAYA,GADLA,Y,MCjBnC6B,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.b24973d7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'; \r\n\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {        \r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length>2 ) {\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue(''); \r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n                placeholder='escribe algo...'\r\n            ></input>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n// AddCategory.defaulProps = {  falta los valores por defecto \r\n//     setCategories:['123', '234', '567']\r\n// }","\r\n  export const getGifs = async( category ) => {\r\n    const api_key ='J8SfWOqIy4BbLgM1v1p7rTnJ723WpBt7'\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=${api_key}`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json(); \r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url \r\n        }\r\n\r\n    })\r\n\r\n    //console.log(gifs);\r\n    return  gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url }) => {\r\n\r\n    //console.log( id, title, url );\r\n    return (\r\n        <div className=\"card animate__animated animate__zoomIn\">\r\n           <img src={ url } alt={ title } />\r\n           <p> { title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    const { data:images, loading} = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n        <h3 className='animated__animated animate__fadeInLeft'>{ category }</h3>   \r\n        \r\n        { loading && <p className='animated__animated animate__flash'>Loading...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key= { img.id }\r\n                            { ...img }  \r\n                        />\r\n                    ))\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() =>{\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n\r\n                // setTimeout( () => {\r\n                    setState({\r\n                        data:imgs,\r\n                        loading: false\r\n                    });\r\n                // },3000)\r\n            })     \r\n\r\n\r\n\r\n    },[category])\r\n\r\n   \r\n\r\n    return state; // data:[], loading: true\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n   \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /* const handleAddd = () => {\r\n        //setCategories([...categories, 'elemento4']);\r\n        setCategories( cat=> [...cat, 'elemento4']); \r\n\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>Gift Expert App</h2>\r\n            <AddCategory setCategories= { setCategories }/>         \r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                            <GifGrid\r\n                            key= { category }\r\n                            category= { category } />\r\n                    ))\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp'; \n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n    \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}